<?php

namespace AlxDorosenco\VatlayerForLaravel\Tests\Unit\Factory\Validate;

use AlxDorosenco\VatlayerForLaravel\Factory\Validate\Validate;
use Tests\TestCase;

class ValidateTest extends TestCase
{
    /**
     * @var Validate
     */
    private $validate;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->validate = new Validate();
    }

    public function testSetVatNumberMethod()
    {
        $type = $this->validate->setVatNumber('LU26375245');

        $this->assertEquals($this->validate, $type);
        $this->assertEquals('LU26375245', $this->validate->getData()['vat_number']);
    }

    public function testSetFormatMethod()
    {
        $type = $this->validate->setFormat(1);

        $this->assertEquals($this->validate, $type);
        $this->assertEquals(1, $this->validate->getData()['format']);
    }

    public function testSetCallbackMethod()
    {
        $type = $this->validate->setCallback('CALLBACK_FUNCTION');

        $this->assertEquals($this->validate, $type);
        $this->assertEquals('CALLBACK_FUNCTION', $this->validate->getData()['callback']);
    }

    public function testGetDataMethod()
    {
        $this->validate
            ->setVatNumber('LU26375245')
            ->setFormat(1)
            ->setCallback('CALLBACK_FUNCTION');

        $data = $this->validate->getData();

        $this->assertIsArray($data);
        $this->assertEquals([
            'vat_number' => 'LU26375245',
            'format' => 1,
            'callback' => 'CALLBACK_FUNCTION'
        ], $data);
    }

    public function testGetTypeMethod()
    {
        $type = $this->validate->getType();

        $this->assertIsString($type);
        $this->assertEquals('validate', $type);
    }
}
